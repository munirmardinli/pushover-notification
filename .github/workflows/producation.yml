name: Production CI/CD Pipeline
on:
 push:
  branches:
   - main
 pull_request:
  branches:
   - main

env:
 GITGUARDIAN_API: ${{ secrets.GITGUARDIAN_API_KEY }}
 NPM_VERSION: "22"
 REGISTRY_URL: "https://npm.pkg.github.com"
 TRIVY_VERSION: "0.64.1"
 IMAGE_TAG: latest
 DOCKER_IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}
 DOCKER_REGISTRY: ghcr.io
 APPLICATION_PORT: 9095

permissions:
 contents: write
 packages: write
 pages: write
 id-token: write
 actions: write
 issues: write
 pull-requests: write

jobs:
 prepare:
  runs-on: ubuntu-latest
  outputs:
   node_modules_cache: ${{ steps.set-cache-output.outputs.cache-hit }}
  steps:
   - uses: actions/checkout@v5
   - name: Set up Node.js
     uses: actions/setup-node@v4
     with:
      node-version: ${{ env.NPM_VERSION }}
      cache: npm
   - name: Cache node modules
     id: cache-node-modules
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      restore-keys: ${{ runner.os }}-node-
   - name: Install dependencies
     run: npm ci
   - name: Set cache output
     id: set-cache-output
     run: echo "cache-hit=$(ls node_modules | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT

 lint:
  needs: prepare
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v5
   - name: Restore cache
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Typecheck
     run: npx tsc --noEmit

 quality-assurance:
  needs: prepare
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v5
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Run npm audit
     run: npm audit --audit-level=moderate

 build-prod:
  needs:
   - lint
   - quality-assurance
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v5
   - name: Restore cache
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Build application
     run: |
      npx tsc
     env:
      NODE_ENV: production
      PORT: ${{ env.APPLICATION_PORT }}

 trivy-scans-prod:
  runs-on: ubuntu-latest
  needs: build-prod
  steps:
   - uses: actions/checkout@v5
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Build application for Trivy
     run: |
      npx tsc
   - name: Install Trivy
     uses: aquasecurity/setup-trivy@v0.2.3
     with:
      version: v${{ env.TRIVY_VERSION }}
   - name: Update Trivy DB
     run: trivy image --download-db-only
   - name: Scan npm vulnerabilities
     run: |
      trivy fs --scanners vuln \
      --severity HIGH,CRITICAL \
      --ignore-unfixed \
      --format table \
      --exit-code 1 \
      --dependency-tree \
      package-lock.json
   - name: Scan Dockerfile
     run: |
      trivy config .github/Dockerfile \
      --severity HIGH,CRITICAL \
      --format table \
      --exit-code 1
   - name: Build Docker image
     run: docker build -f .github/Dockerfile -t homelab-cli .
   - name: Scan Docker image
     run: |
      trivy image homelab-cli \
      --scanners vuln \
      --severity HIGH,CRITICAL \
      --ignore-unfixed \
      --format table \
      --exit-code 1

 check-audit-prod:
  needs: build-prod
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v5
   - uses: actions/checkout@v5
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Run npm audit
     run: npm audit --audit-level=moderate
     working-directory: ${{ github.workspace }}

 deploy-docs:
  needs: build-prod
  runs-on: ubuntu-latest
  if: >
   github.event_name == 'push' &&
   github.ref == 'refs/heads/main' &&
   !startsWith(github.event.head_commit.message, 'chore(release):')
  steps:
   - uses: actions/checkout@v5
   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: ${{ env.NPM_VERSION }}
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - run: npx typedoc --options typedoc.json
   - name: Deploy to gh-pages branch
     uses: peaceiris/actions-gh-pages@v4
     with:
      github_token: ${{ secrets.GITHUB_TOKEN }}
      publish_dir: ./docs
      publish_branch: gh-pages

 docker-prod:
  needs: build-prod
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v5
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Build application
     run: npx tsc
   - name: Prune Dependencies
     run: npm prune --production
   - name: Log in to GitHub Container Registry
     uses: docker/login-action@v3
     with:
      registry: ${{ env.DOCKER_REGISTRY }}
      username: ${{ github.actor }}
      password: ${{ secrets.GITHUB_TOKEN }}
   - name: Build and push Docker image
     uses: docker/build-push-action@v6
     with:
      context: .
      file: .github/Dockerfile
      push: true
      tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      labels: ${{ steps.meta.outputs.labels }}
      build-args: |
       NODE_ENV=production
       BRANCH=${{ github.ref_name }}
       BUILD_TIMESTAMP=${{ github.event.repository.updated_at }}
       GITHUB_REPO=${{ github.repository }}
       IMAGE_TITLE=${{ github.event.repository.name }}
       GITHUB_OWNER=${{ github.repository_owner }}
       GITHUB_REF_NAME=${{ github.ref_name }}
       IMAGE_DESCRIPTION=${{ github.event.repository.description }}
       GITHUB_SHA=${{ github.sha }}
       REPO_LICENSE=${{ github.event.repository.license }}
       REPO_CATEGORIES=${{ github.event.repository.topics }}
 release:
  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  needs: build-prod
  runs-on: ubuntu-latest
  steps:
   - name: Checkout code
     uses: actions/checkout@v5
     with:
      fetch-depth: 0
   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: ${{ env.NPM_VERSION }}
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Authenticate with GitHub Packages
     run: |
      export NODE_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
      echo "NODE_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

   - name: Install release automation
     run: npm install @munirmardinli-dev/release
     env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   - name: Run Semantic Release
     env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     run: npx munir-release run --ci

 publish-npm:
  needs:
   - release
   - docker-prod
   - deploy-docs
   - check-audit-prod
   - trivy-scans-prod
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v5
   - name: Set up Node.js
     uses: actions/setup-node@v4
     with:
      node-version: ${{ env.NPM_VERSION }}
      registry-url: ${{ env.REGISTRY_URL }}
   - uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Build application
     run: npx tsc
   - name: Publish package to GitHub Packages
     run: npm publish --access public
     env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
